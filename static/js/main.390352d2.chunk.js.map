{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tasksList","setTasks","doneList","setDone","handleDelete","e","dest_items","Array","from","taskText","currentTarget","parentElement","innerText","splice","indexOf","className","isHydrating","type","src","onDragEnd","console","log","destination","source","droppableId","items","index","reorderedItem","id","provided","droppableProps","ref","innerRef","map","task","draggableId","toString","draggableProps","dragHandleProps","placeholder","onSubmit","preventDefault","newTask","taskName","document","getElementById","value","includes","alert","length","done","onClick","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.390352d2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\nimport ScriptTag from 'react-script-tag';\n\nfunction App() {\n    const [tasksList, setTasks] = useState([]);\n    const addTask = (newTask) => setTasks([...tasksList, newTask]);\n\n    const [doneList, setDone] = useState([]);\n\n    function handleSubmit(e) {\n        e.preventDefault(); // prevent page from refreshing\n        let taskName = document.getElementById(\"task\").value;\n        if (tasksList.includes(taskName)) {\n            alert(\"This task already exists! :(\")\n            return;\n        }\n        if (taskName.length > 0) {\n            addTask(taskName);\n        }\n        document.getElementById(\"task\").value = ''; // reset input field\n    }\n\n    function handleOnDragEnd(e) {\n        console.log(e);\n        // handling if inserting into null destination\n        if (e.destination == null) {\n            return;\n        }\n        // if source is tasks\n        if (e.source.droppableId === \"tasks\") {\n            // if dest is done\n            if (e.destination.droppableId === \"done\") {\n                const items = Array.from(tasksList);\n                const dest_items = Array.from(doneList);\n\n                // remove from array and get the returned item\n                const [reorderedItem] = items.splice(e.source.index, 1)\n\n                // get destination and insert into destination index\n                dest_items.splice(e.destination.index, 0 , reorderedItem);\n                // update state\n                setTasks(items);\n                setDone(dest_items);\n            }\n            // if dest is tasks\n            else if (e.destination.droppableId === \"tasks\") {\n                const items = Array.from(tasksList);\n\n                // remove from array and get the returned item\n                const [reorderedItem] = items.splice(e.source.index, 1)\n                \n                // get destination and insert into destination index\n                items.splice(e.destination.index, 0, reorderedItem);\n                // update state\n                setTasks(items);\n            }\n        }\n        // if source is done\n        else if (e.source.droppableId === \"done\") {\n            // if dest is done\n            if (e.destination.droppableId === \"done\") {\n                const dest_items = Array.from(doneList);\n\n                // remove from array and get the returned item\n                const [reorderedItem] = dest_items.splice(e.source.index, 1);\n\n                // get destination and insert into destination index\n                dest_items.splice(e.destination.index, 0 , reorderedItem);\n                // update state\n                setDone(dest_items);\n            }\n            // if dest is tasks\n            else if (e.destination.droppableId === \"tasks\") {\n                const items = Array.from(tasksList);\n                const dest_items = Array.from(doneList);\n\n                // remove from array and get the returned item\n                const [reorderedItem] = dest_items.splice(e.source.index, 1);\n                // get destination and insert into destination index\n                items.splice(e.destination.index, 0, reorderedItem);\n                // update state\n                setDone(dest_items);\n                setTasks(items);\n            }\n        }\n    }\n    \n    function handleDelete(e) {\n        const dest_items = Array.from(doneList);\n        const taskText = e.currentTarget.parentElement.innerText;\n        dest_items.splice(dest_items.indexOf(taskText), 1);     \n        setDone(dest_items);       \n    }\n\n    return (   \n        <div className=\"main-background\"> \n            <ScriptTag isHydrating={true} type=\"text/javascript\" src=\"https://kit.fontawesome.com/ec413d8557.js\" />\n            <div className=\"tasks-background\">\n                <div className='row'>   \n                    <DragDropContext onDragEnd={handleOnDragEnd}> \n                    <div className=\"column\" id='column-1'>\n                        <h1 className=\"c1-title\"> todo. </h1> \n                            <Droppable droppableId='tasks'>\n                                {(provided) => (\n                                    <ul className=\"tasks\" {...provided.droppableProps} ref={provided.innerRef}>\n                                        {tasksList.map((task) => {\n                                            let index = tasksList.indexOf(task)\n                                            return (\n                                                <Draggable key={toString(index + 50)} draggableId={(index + 50).toString()} index={index}> \n                                                    {(provided) => (       \n                                                        <li className=\"tasksRow\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}> \n                                                            {task} \n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ); \n                                        })}\n                                        {provided.placeholder}\n                                    </ul>   \n                                )}  \n                            </Droppable>\n                            <form className=\"form\" onSubmit = {handleSubmit}> \n                                <input id=\"task\" placeholder='Add a task.' type=\"text\"/>\n                                <input id=\"submit\" type=\"submit\"/>\n                            </form>\n\n                    </div>\n\n                    <div className=\"column\" id='column-2'>\n                        <h1 className=\"c2-title\"> done. </h1>\n                            <Droppable droppableId ='done'>\n                                {(provided) => (\n                                    <ul className=\"done\" {...provided.droppableProps} ref={provided.innerRef}>\n                                        {doneList.map((done) => {\n                                            let index = doneList.indexOf(done)\n                                            return (\n                                                <Draggable key={toString(index + 100)} draggableId={(index + 100).toString()} index={index}>\n                                                    {(provided) => (\n                                                        <li className=\"doneRow\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}> \n                                                            {done} \n                                                            <button type=\"button\" onClick={handleDelete} className='delete'><i class=\"fas fa-trash-alt\"></i></button>\n                                                        </li> \n                                                    )}\n                                                </Draggable>\n                                            );\n                                        })}\n                                        {provided.placeholder}\n                                    </ul>\n                                )}\n                            </Droppable>\n\n                    </div>\n                    </DragDropContext>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}